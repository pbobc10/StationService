// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StationService.Data;

#nullable disable

namespace StationService.Migrations
{
    [DbContext(typeof(StationeServiceContext))]
    [Migration("20241204030739_FistName_FamilyName_Email_to_sup_adm_gasStAtt")]
    partial class FistName_FamilyName_Email_to_sup_adm_gasStAtt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("StationService.Models.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("StationService.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DispenserUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DispensingUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GasStationAttendantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShiftType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DispensingUnitId");

                    b.HasIndex("GasStationAttendantId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("StationService.Models.DispensingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GasStationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnitNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GasStationId");

                    b.ToTable("DispensingUnits");
                });

            modelBuilder.Entity("StationService.Models.FuelPipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DispensingUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DispensingUnitId");

                    b.ToTable("FuelPipes");
                });

            modelBuilder.Entity("StationService.Models.FuelQuantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ClosingQuantity")
                        .HasColumnType("REAL");

                    b.Property<int>("FuelType")
                        .HasColumnType("INTEGER");

                    b.Property<double>("OpeningQuantity")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("FuelQuantities");
                });

            modelBuilder.Entity("StationService.Models.GasMeter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FuelPipeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MeterReading")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("FuelPipeId")
                        .IsUnique();

                    b.ToTable("GasMeters");
                });

            modelBuilder.Entity("StationService.Models.GasStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdministratorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.ToTable("GasStations");
                });

            modelBuilder.Entity("StationService.Models.GasStationAttendant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GasStationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Shift")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GasStationId");

                    b.ToTable("GasStationAttendants");
                });

            modelBuilder.Entity("StationService.Models.Supervisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("GasStationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GasStationId")
                        .IsUnique();

                    b.ToTable("Supervisors");
                });

            modelBuilder.Entity("StationService.Models.Assignment", b =>
                {
                    b.HasOne("StationService.Models.DispensingUnit", "DispensingUnit")
                        .WithMany()
                        .HasForeignKey("DispensingUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StationService.Models.GasStationAttendant", "GasStationAttendant")
                        .WithMany()
                        .HasForeignKey("GasStationAttendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StationService.Models.Supervisor", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DispensingUnit");

                    b.Navigation("GasStationAttendant");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("StationService.Models.DispensingUnit", b =>
                {
                    b.HasOne("StationService.Models.GasStation", "GasStation")
                        .WithMany("DispensingUnits")
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GasStation");
                });

            modelBuilder.Entity("StationService.Models.FuelPipe", b =>
                {
                    b.HasOne("StationService.Models.DispensingUnit", "DispensingUnit")
                        .WithMany("Pipes")
                        .HasForeignKey("DispensingUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DispensingUnit");
                });

            modelBuilder.Entity("StationService.Models.FuelQuantity", b =>
                {
                    b.HasOne("StationService.Models.Assignment", "Assignment")
                        .WithMany("FuelQuantities")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("StationService.Models.GasMeter", b =>
                {
                    b.HasOne("StationService.Models.FuelPipe", "FuelPipe")
                        .WithOne("Meter")
                        .HasForeignKey("StationService.Models.GasMeter", "FuelPipeId");

                    b.Navigation("FuelPipe");
                });

            modelBuilder.Entity("StationService.Models.GasStation", b =>
                {
                    b.HasOne("StationService.Models.Administrator", "Administrator")
                        .WithMany("Stations")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("StationService.Models.GasStationAttendant", b =>
                {
                    b.HasOne("StationService.Models.GasStation", "GasStation")
                        .WithMany("GasStationAttendants")
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GasStation");
                });

            modelBuilder.Entity("StationService.Models.Supervisor", b =>
                {
                    b.HasOne("StationService.Models.GasStation", "Station")
                        .WithOne("Supervisor")
                        .HasForeignKey("StationService.Models.Supervisor", "GasStationId");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("StationService.Models.Administrator", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("StationService.Models.Assignment", b =>
                {
                    b.Navigation("FuelQuantities");
                });

            modelBuilder.Entity("StationService.Models.DispensingUnit", b =>
                {
                    b.Navigation("Pipes");
                });

            modelBuilder.Entity("StationService.Models.FuelPipe", b =>
                {
                    b.Navigation("Meter")
                        .IsRequired();
                });

            modelBuilder.Entity("StationService.Models.GasStation", b =>
                {
                    b.Navigation("DispensingUnits");

                    b.Navigation("GasStationAttendants");

                    b.Navigation("Supervisor")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
